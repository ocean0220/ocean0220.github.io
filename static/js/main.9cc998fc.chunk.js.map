{"version":3,"sources":["views/compornents/Tweet.jsx","views/compornents/Timeline.jsx","views/compornents/TweetInput.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tweet","props","React","useState","liked","setLiked","className","icon","displayName","accountName","content","onClick","Timeline","tweetList","tweets","map","tw","id","TweetInput","textareaRef","useRef","sendTweet","useCallback","current","value","addTweet","Date","getTime","ref","App","setTweets","tweet","prev","useEffect","getAxiosDemo","a","axios","get","res","console","log","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAsCeA,EAnCD,SAACC,GAOb,MAAyBC,IAAMC,UAAS,GAAxC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OAEE,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCL,EAAMM,OACvC,sBAAKD,UAAU,iBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,sBAAMA,UAAU,cAAhB,SAA+BL,EAAMO,cACrC,sBAAMF,UAAU,cAAhB,SAA+BL,EAAMQ,iBAEvC,qBAAKH,UAAU,UAAf,SAA0BL,EAAMS,UAChC,qBAAKJ,UAAU,cAAf,SACE,sBAAMK,QAjBI,WAChBN,GAAS,kBAAKD,MAgBR,SAA4BA,EAAQ,SAAI,oBCVnCQ,EAfE,SAACX,GAChB,IAAMY,EAAYZ,EAAMa,OAAOC,KAAI,SAACC,GAAD,OACjC,cAAC,EAAD,CAEET,KAAMS,EAAGT,KACTC,YAAaQ,EAAGR,YAChBC,YAAaO,EAAGP,YAChBC,QAASM,EAAGN,SAJPM,EAAGC,OAQZ,OAAO,qBAAKX,UAAU,WAAf,SAA2BO,K,yBCiBrBK,EA9BI,SAACjB,GAClB,IAAMkB,EAAcjB,IAAMkB,OAAO,MAE3BC,EAAYnB,IAAMoB,aAAY,WAClC,GAAIH,EAAYI,QAAS,CACvB,GAAkC,KAA9BJ,EAAYI,QAAQC,MAAc,OACtCvB,EAAMwB,SAAS,CACbR,IAAI,IAAIS,MAAOC,UACfpB,KAAM,eACNC,YAAa,eACbC,YAAa,MACbC,QAASS,EAAYI,QAAQC,QAGjCL,EAAYI,QAAQC,MAAQ,OAC3B,CAACL,EAAYI,QAAStB,EAAMwB,WAE/B,OACE,sBAAKnB,UAAU,cAAf,UACE,8BACE,0BAAUA,UAAU,iBAAiBsB,IAAKT,MAE5C,8BACE,wBAAQb,UAAU,aAAaK,QAASU,EAAxC,4CCwFOQ,MAlFf,WAmDE,MAA8B3B,IAAMC,SAAS,IAA7C,mBAAQW,EAAR,KAAgBgB,EAAhB,KAGML,EAAWvB,IAAMoB,aAAY,SAACS,GAAD,OAAWD,GAAU,SAACE,GAAD,OAAWD,GAAX,mBAAqBC,SAAQ,CAACF,IAMxF5B,IAAM+B,WAAW,WACfC,MACC,IAEH,IAAMA,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,IAAMC,IAAI,gEADT,OACbC,EADa,OAEnBC,QAAQC,IAAIF,GACZR,GAAU,kBAAMQ,EAAIG,QAHD,2CAAH,qDAMlB,OACE,gCACE,cAAC,EAAD,CAAYhB,SAAWA,IACvB,cAAC,EAAD,CAAUX,OAASA,QC5FR4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9cc998fc.chunk.js","sourcesContent":["import React from \"react\" //react.jsの中からReactというモジュールをとってきて\r\n\r\n\r\nconst Tweet = (props) => { //propsという引数を入れる\r\n  // ハローリアクト確認\r\n  // return <div>{props.content}</div>\r\n\r\n  // Twitterもどきをつくる01\r\n  //hooksでlikedの\r\n\r\n  const [liked,setLiked] = React.useState(false) //hooks、初期値は白抜き\r\n \r\n  const toggleLike =()=>{\r\n    setLiked(()=>!liked); //(!liked)でもOK状態反転！で否定となる\r\n    //likedの状態を反転にして返す処理\r\n    }\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"tweet\">\r\n      <div className=\"icon-container\">{props.icon}</div>\r\n      <div className=\"body-container\">\r\n        <div className=\"status-display\">\r\n          <span className=\"displayName\">{props.displayName}</span>\r\n          <span className=\"accountName\">{props.accountName}</span>\r\n        </div>\r\n        <div className=\"content\">{props.content}</div>\r\n        <div className=\"status-icon\">\r\n          <span onClick={toggleLike}>{liked ? \"♥\":\"♡\"}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default Tweet;","import React from \"react\" //react.jsの中からReactというモジュールをとってきて\r\nimport Tweet from \"./Tweet\"\r\n\r\n\r\nconst Timeline = (props) => {\r\n  const tweetList = props.tweets.map((tw) => (\r\n    <Tweet\r\n      key={tw.id}\r\n      icon={tw.icon}\r\n      displayName={tw.displayName}\r\n      accountName={tw.accountName}\r\n      content={tw.content}\r\n    />\r\n  ))\r\n\r\n  return <div className=\"timeline\">{tweetList}</div>\r\n\r\n}\r\n\r\nexport default Timeline;","import React from \"react\";\r\n\r\nconst TweetInput = (props) => {\r\n  const textareaRef = React.useRef(null);\r\n\r\n  const sendTweet = React.useCallback(() => {\r\n    if (textareaRef.current) {\r\n      if (textareaRef.current.value === \"\") return;\r\n      props.addTweet({\r\n        id: new Date().getTime(),\r\n        icon: \"🐱\",\r\n        displayName: \"ねこ\",\r\n        accountName: \"cat\",\r\n        content: textareaRef.current.value\r\n      });\r\n    }\r\n    textareaRef.current.value = null;\r\n  }, [textareaRef.current, props.addTweet]);\r\n\r\n  return (\r\n    <div className=\"tweet-input\">\r\n      <div>\r\n        <textarea className=\"tweet-textarea\" ref={textareaRef}></textarea>\r\n      </div>\r\n      <div>\r\n        <button className=\"send-tweet\" onClick={sendTweet}>ツイート</button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TweetInput;","import React from \"react\";\nimport Timeline from \"./views/compornents/Timeline\"\nimport \"./assets/css/style.css\"\nimport axios from \"axios\";\nimport TweetInput from \"./views/compornents/TweetInput\"\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.js</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n// }\n\n\n\nfunction App (){\n  // return(\n\n  //   <div>\n  //   <Tweet content=\"Hello\"/>\n  //   <Tweet content=\"React!\"/>\n  //   </div>\n  // )\n\n//   return(\n// <Tweet \n//   icon=\"🐹\" //画像を入れるけど時間の関係でアイコン\n//   displayName=\"さいか\"\n//   accountName=\"@saika\"\n//   content=\"react講座受講中！！\"\n//   />\n//   )  \n\n// const tweets = [\n//   {\n//     id:0,\n//     icon:\"🐹\",\n//     displayName:\"さいか\",\n//     accountName:\"@saika\",\n//     content:\"react講座受講中！！\"\n//   },\n//   {\n//     id:1,\n//     icon:\"🐰\",\n//     displayName:\"うさぎ\",\n//     accountName:\"@rabbit\",\n//     content:\"にんじん食べたい\"\n//   },\n//   {\n//     id:3,\n//     icon:\"🐯\",\n//     displayName:\"トラ\",\n//     accountName:\"@tiger\",\n//     content:\"寅年だね\"\n//   },\n//   {\n//     id:4,\n//     icon:\"😸\",\n//     displayName:\"ねこ\",\n//     accountName:\"@cat\",\n//     content:\"煮干しがだいすき🐡\"\n//   },\n\n// ]\n\n\n  const [ tweets, setTweets ] = React.useState([]);//初期値は空\n  \n  // const addTweet = React.useCallback( 引数1, 引数2)\n  const addTweet = React.useCallback((tweet) => setTweets((prev) => [tweet, ...prev]), [setTweets])\n  // const addTweet = React.useCallback((tweet) => setTweets((prev) => [tweet, ...prev]), [tweets])\n\n\n// 非同期通信でAPIを叩いて\n\nReact.useEffect( () => {\n  getAxiosDemo(); \n}, [] )\n\nconst getAxiosDemo = async () =>{\n  const res = await axios.get(\"https://run.mocky.io/v3/b093ba81-1234-4be8-bbf2-a98c78e0a021\")\n  console.log(res);\n  setTweets(() => res.data);\n}\n\nreturn(\n  <div>\n    <TweetInput addTweet={ addTweet }/>\n    <Timeline tweets={ tweets }/>\n  </div>\n)\n\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}